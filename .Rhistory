county2$date <- gsub("-", "", county2$date)
# Treat all dates as integers
county2$date <- as.numeric(county2$date)
##############################################################################
# Data preparation
##############################################################################
# Set working directory (for exporting figures)
setwd("/Users/nolankavanagh/Documents/Github/covid19model")
##############################################################################
# Social distancing dataset
##############################################################################
# Read dataset into R
social <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/0423_sds_full_county.csv")
# Select necessary columns
social <- social %>% select(date, state_fips, state_name, county_fips, county_name, daily_distance_diff, daily_visitation_diff)
# Restructure dataset to wide
social <- social %>%
pivot_wider(names_from = c(date), values_from = c(daily_distance_diff, daily_visitation_diff))
# Alphabetize columns
social <- social[,order(colnames(social))]
# Subset dataset to distances
social <- social[grepl("county|state|daily_distance", names(social))]
# Rename distance columns
names(social) = sub("daily_distance_diff_", "", names(social))
# Identify latest date
MAX_DATE <- as.Date(names(social[grepl("2020-", names(social))])
[ncol(social[grepl("2020-", names(social))])])
##############################################################################
# Census/ACS datasets
##############################################################################
# Source: American Community Survey, 5-year averages 2014-2018
# County size, percent male, age distribution, percent Black, percent Hispanic
census_demogr <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/ACSDP5Y2018.DP05_data_with_overlays_2020-03-27T211621.csv")
census_demogr <- census_demogr %>% select(GEO_ID, NAME, DP05_0001E, DP05_0002PE, DP05_0065PE, DP05_0071PE, DP05_0005PE, DP05_0006PE, DP05_0007PE, DP05_0008PE, DP05_0009PE, DP05_0010PE, DP05_0011PE, DP05_0012PE, DP05_0013PE, DP05_0014PE, DP05_0015PE, DP05_0016PE, DP05_0017PE)
# Percent with college degree (age 25+), percent foreign-born
census_demog2 <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/ACSDP5Y2018.DP02_data_with_overlays_2020-04-08T113651.csv")
census_demog2 <- census_demog2 %>% select(GEO_ID, NAME, DP02_0067PE, DP02_0092PE)
# Income per capita
census_income <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/ACSST5Y2018.S1902_data_with_overlays_2020-03-27T201025.csv")
census_income <- census_income %>% select(GEO_ID, NAME, S1902_C03_019E)
# Percent in specific industries
census_sector <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/ACSDP5Y2018.DP03_data_with_overlays_2020-03-29T185057.csv")
census_sector <- census_sector %>% select(GEO_ID, NAME, DP03_0037PE, DP03_0038PE, DP03_0042PE)
# Percent uninsured
census_uninsu <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/ACSST5Y2018.S2701_data_with_overlays_2020-04-08T232745.csv")
census_uninsu <- census_uninsu %>% select(GEO_ID, NAME, S2701_C05_001E)
# Percent of population in rural area
census_rural <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/DECENNIALSF12010.H2_data_with_overlays_2020-03-28T144434.csv")
census_rural <- census_rural %>% select(GEO_ID, NAME, H002001, H002005)
# Re-specify FIPS for renamed counties
census_rural <- census_rural %>%
mutate(
GEO_ID = case_when(
GEO_ID == "0500000US46113" ~ "0500000US46102", # Ogala Lakota, South Dakota
GEO_ID == "0500000US02270" ~ "0500000US02158", # Kusilvak Census Area, Alaska
TRUE ~ as.character(GEO_ID),
)
)
# Merge Census datasets
census <- census_demogr %>% full_join(census_demog2)
census <- census        %>% full_join(census_income)
census <- census        %>% full_join(census_sector)
census <- census        %>% full_join(census_uninsu)
census <- census        %>% full_join(census_rural, by = c("GEO_ID"))
# Rename column names
census <- census %>%
rename(population = DP05_0001E,
perc_male  = DP05_0002PE,
perc_5_und = DP05_0005PE,
perc_5_9   = DP05_0006PE,
perc_10_14 = DP05_0007PE,
perc_15_19 = DP05_0008PE,
perc_20_24 = DP05_0009PE,
perc_25_34 = DP05_0010PE,
perc_35_44 = DP05_0011PE,
perc_45_54 = DP05_0012PE,
perc_55_59 = DP05_0013PE,
perc_60_64 = DP05_0014PE,
perc_65_74 = DP05_0015PE,
perc_75_84 = DP05_0016PE,
perc_85_up = DP05_0017PE,
perc_black = DP05_0065PE,
perc_Hisp  = DP05_0071PE,
income     = S1902_C03_019E,
perc_rtail = DP03_0037PE,
perc_trspt = DP03_0038PE,
perc_hlthc = DP03_0042PE,
perc_collg = DP02_0067PE,
num_rural  = H002005,
num_2010   = H002001,
perc_forgn = DP02_0092PE,
perc_unins = S2701_C05_001E,
)
# Remove extraneous column
census <- census[-grep("id", census$GEO_ID),]
# Reformat FIPS codes
census$GEO_ID <- as.numeric(str_remove(census$GEO_ID, "0500000US"))
# Treat variables as numeric
convert <- c("population", "perc_male", "perc_5_und", "perc_5_9", "perc_10_14", "perc_15_19", "perc_20_24", "perc_25_34", "perc_35_44", "perc_45_54", "perc_55_59", "perc_60_64", "perc_65_74", "perc_75_84", "perc_85_up", "perc_black", "perc_Hisp", "income", "perc_rtail", "perc_trspt", "perc_hlthc", "perc_collg", "num_rural", "num_2010", "perc_forgn", "perc_unins")
census <- census %>% mutate_at(convert, ~as.numeric(as.character(.x)))
# Restructure age brackets
census$young  = census$perc_5_und + census$perc_5_9 + census$perc_10_14 + census$perc_15_19 + census$perc_20_24
census$middle = census$perc_25_34 + census$perc_35_44 + census$perc_45_54 + census$perc_55_59 + census$perc_60_64
census$elder  = census$perc_65_74 + census$perc_75_84 + census$perc_85_up
# Calculate percentage rural population in 2020
census$perc_rural = census$num_rural/census$num_2010*100
##############################################################################
# Merge datasets
##############################################################################
# Merge datasets
merged <- census %>% full_join(social, by = c("GEO_ID" = "county_fips"))
# Determine indexes of last day/ten days prior
START_INDEX <- grep(MAX_DATE-9, colnames(merged))
END_INDEX   <- grep(MAX_DATE,   colnames(merged))
# Print date range
print(MAX_DATE); print(MAX_DATE-9)
# Calculate social distancing for last ten days
merged$dist_av2 <- rowMeans(merged[,START_INDEX:END_INDEX], na.rm=T)
# Assign shelter-in-place orders
merged <- merged %>%
mutate(
state_lock = case_when(
state_fips %in% c(72)             ~ as.Date("2020-03-16"),
state_fips %in% c(6)              ~ as.Date("2020-03-19"),
state_fips %in% c(17,34)          ~ as.Date("2020-03-22"),
state_fips %in% c(36,41,53)       ~ as.Date("2020-03-23"),
state_fips %in% c(9, 10,22,25,26,35,39) ~ as.Date("2020-03-24"),
state_fips %in% c(15,16,18,54,55) ~ as.Date("2020-03-25"),
state_fips %in% c(8, 50)          ~ as.Date("2020-03-26"),
state_fips %in% c(21)             ~ as.Date("2020-03-27"),
state_fips %in% c(27,30,33,44,56) ~ as.Date("2020-03-28"),
state_fips %in% c(2)              ~ as.Date("2020-03-29"),
state_fips %in% c(20,51)          ~ as.Date("2020-03-30"),
state_fips %in% c(24,37)          ~ as.Date("2020-03-31"),
state_fips %in% c(4, 11,32,47)    ~ as.Date("2020-04-01"),
state_fips %in% c(23,42,48)       ~ as.Date("2020-04-02"),
state_fips %in% c(12,13)          ~ as.Date("2020-04-03"),
state_fips %in% c(28)             ~ as.Date("2020-04-04"),
state_fips %in% c(1)              ~ as.Date("2020-04-05"),
state_fips %in% c(29)             ~ as.Date("2020-04-06"),
state_fips %in% c(45)             ~ as.Date("2020-04-08"),
TRUE ~ as.Date("2020-12-31"),
)
)
# Calculate days of lock-down
# Note: Need to offset by 1 to count day-of
merged <- merged %>%
mutate(
days_locked = case_when(
(as.Date("2020-03-28") - merged$state_lock + 1) <  0 ~ 0,
(as.Date("2020-03-28") - merged$state_lock + 1) > 10 ~ 10,
TRUE ~ as.numeric(as.Date("2020-03-28") - merged$state_lock + 1),
)
)
# Complete cases for regression variables
merged <- merged %>%
filter_at(vars(c("dist_av2", "income", "perc_rural")), all_vars(!is.na(.)))
county <- merged
# Create state,county variable
county$county_name2 <- sub(" County", "", county$county_name)
county$county_name2 <- tolower(county$county_name2)
county$state_name2  <- tolower(county$state_name)
county$state_county <- paste(county$state_name2, county$county_name2, sep=",")
View(county2)
# Reformat from wide to long
county2 <- gather(data=county, date, distancing, "2020-02-24":"2020-04-21", factor_key=TRUE)
county2$date <- gsub("-", "", county2$date)
# Treat all dates as integers
county2$date <- as.numeric(county2$date)
weather$date <- as.numeric(weather$date)
# Merge datasets by "state,county"
weather_merged <- county2 %>% full_join(weather)
View(weather)
View(weather_merged)
# Complete cases for temperature
weather_merged <- weather_merged %>%
filter_at(vars(c("TAVG")), all_vars(!is.na(.)))
View(weather_merged)
# Merge datasets by "state,county"
weather_merged <- county2 %>% full_join(weather)
# Complete cases for temperature
weather_merged <- weather_merged %>%
filter_at(vars(c("distancing", "TAVG")), all_vars(!is.na(.)))
unique(weather_merged(state_county))
unique(weather_merged$state_county)
# Merge datasets by "state,county"
weather_merged <- county2 %>% full_join(weather)
unique(weather_merged$state_county)
# Merge datasets by "state,county"
weather_merged <- county2 %>% full_join(weather)
unique(weather_merged$state_county)
weather_merged <- weather_merged %>%
filter_at(vars(c("TAVG")), all_vars(!is.na(.)))
unique(weather_merged$state_county)
weather_merged <- weather_merged %>%
filter_at(vars(c("TAVG")), all_vars(!is.na(.)))
subset(weather_merged, weather_merged$distancing == NA)
View(weather_merged)
subset(weather_merged, weather_merged$distancing == NA)
subset(weather_merged, weather_merged$distancing == NA)
# Merge datasets by "state,county"
weather_merged <- county2 %>% full_join(weather)
weather_merged <- weather_merged %>%
filter_at(vars(c("TAVG")), all_vars(!is.na(.)))
View(weather_merged)
subset(weather_merged, weather_merged$distancing == NA)
View(subset(weather_merged, weather_merged$distancing == NA))
table(is.na(weather_merged$distancing))
View(subset(weather_merged, is.na(weather_merged$distancing)))
unique(subset(weather_merged, is.na(weather_merged$distancing))$state_county)
unique(weather_merged$state_county)
unique(subset(weather_merged, is.na(weather_merged$distancing))$state_county)
unique(weather_merged$state_county)
county <- merged
# Create state,county variable
county$county_name2 <- sub(" County", "", county$county_name)
county$county_name2 <- tolower(county$county_name2)
county$state_name2  <- tolower(county$state_name)
county$state_county <- paste(county$state_name2, county$county_name2, sep=",")
# Reformat from wide to long
county2 <- gather(data=county, date, distancing, "2020-02-24":"2020-04-21", factor_key=TRUE)
county2$date <- gsub("-", "", county2$date)
# Treat all dates as integers
county2$date <- as.numeric(county2$date)
weather$date <- as.numeric(weather$date)
# Merge datasets by "state,county"
weather_merged <- county2 %>% full_join(weather)
# weather_merged <- weather_merged %>%
#   filter_at(vars(c("TAVG")), all_vars(!is.na(.)))
# Complete cases for temperature
weather_merged <- weather_merged %>%
filter_at(vars(c("distancing", "TAVG")), all_vars(!is.na(.)))
# Graph of social distancing by income
weather_plot <- ggplot(weather_merged, aes(x=TAVG, y=distancing)) +
geom_point(alpha=0.01) +
geom_smooth(method=lm) +
theme_test() +
theme(legend.title = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("County Per Capita Income") +
ylab("Change in Average Movement") +
labs(size = "County\nPopulation") +
scale_size(range = c(1,10), labels = comma_format(), breaks = c(10000,100000,1000000,10000000)) +
# scale_x_continuous(labels = dollar_format(prefix="$")) +
scale_y_continuous(labels = percent_format(accuracy=1), limits = c(-1,0.5)) +
# annotate("text", x=47500, y=-0.1, label="More distancing", fontface=2, size=3, hjust=0, vjust=0) +
# annotate("text", x=47500, y=0.1, label="Less distancing", fontface=2, size=3, hjust=0, vjust=1) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
print(weather_plot)
# Graph of social distancing by income
weather_plot <- ggplot(weather_merged, aes(x=TAVG, y=distancing)) +
geom_point(alpha=0.01) +
geom_smooth(method=lm) +
theme_test() +
theme(legend.title = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("Temperature") +
ylab("Change in Average Movement") +
labs(size = "County\nPopulation") +
scale_size(range = c(1,10), labels = comma_format(), breaks = c(10000,100000,1000000,10000000)) +
# scale_x_continuous(labels = dollar_format(prefix="$")) +
scale_y_continuous(labels = percent_format(accuracy=1), limits = c(-1,0.5)) +
# annotate("text", x=47500, y=-0.1, label="More distancing", fontface=2, size=3, hjust=0, vjust=0) +
# annotate("text", x=47500, y=0.1, label="Less distancing", fontface=2, size=3, hjust=0, vjust=1) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
print(weather_plot)
names(weather_merged)
table(weather_merged$state_lock)
# Before/after March 15
weather_merged <- weather_merged %>%
mutate(
march15 = case_when(
date >  as.Date("2020-03-15") ~ 1,
date <= as.Date("2020-03-15") ~ 0,
)
)
# Graph of social distancing by income
weather_plot <- ggplot(weather_merged, aes(x=TAVG, y=distancing, group=march15, color=march15)) +
geom_point(alpha=0.01) +
geom_smooth(method=lm) +
theme_test() +
theme(legend.title = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("Temperature") +
ylab("Change in Average Movement") +
labs(size = "County\nPopulation") +
scale_size(range = c(1,10), labels = comma_format(), breaks = c(10000,100000,1000000,10000000)) +
# scale_x_continuous(labels = dollar_format(prefix="$")) +
scale_y_continuous(labels = percent_format(accuracy=1), limits = c(-1,0.5)) +
# annotate("text", x=47500, y=-0.1, label="More distancing", fontface=2, size=3, hjust=0, vjust=0) +
# annotate("text", x=47500, y=0.1, label="Less distancing", fontface=2, size=3, hjust=0, vjust=1) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
print(weather_plot)
# Graph of social distancing by income
weather_plot <- ggplot(weather_merged, aes(x=TAVG, y=distancing, group=march15)) +
geom_point(alpha=0.01) +
geom_smooth(method=lm) +
theme_test() +
theme(legend.title = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("Temperature") +
ylab("Change in Average Movement") +
labs(size = "County\nPopulation") +
scale_size(range = c(1,10), labels = comma_format(), breaks = c(10000,100000,1000000,10000000)) +
# scale_x_continuous(labels = dollar_format(prefix="$")) +
scale_y_continuous(labels = percent_format(accuracy=1), limits = c(-1,0.5)) +
# annotate("text", x=47500, y=-0.1, label="More distancing", fontface=2, size=3, hjust=0, vjust=0) +
# annotate("text", x=47500, y=0.1, label="Less distancing", fontface=2, size=3, hjust=0, vjust=1) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
print(weather_plot)
# Graph of social distancing by income
weather_plot <- ggplot(weather_merged, aes(x=TAVG, y=distancing, color=march15)) +
geom_point(alpha=0.01) +
geom_smooth(method=lm) +
theme_test() +
theme(legend.title = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("Temperature") +
ylab("Change in Average Movement") +
labs(size = "County\nPopulation") +
scale_size(range = c(1,10), labels = comma_format(), breaks = c(10000,100000,1000000,10000000)) +
# scale_x_continuous(labels = dollar_format(prefix="$")) +
scale_y_continuous(labels = percent_format(accuracy=1), limits = c(-1,0.5)) +
# annotate("text", x=47500, y=-0.1, label="More distancing", fontface=2, size=3, hjust=0, vjust=0) +
# annotate("text", x=47500, y=0.1, label="Less distancing", fontface=2, size=3, hjust=0, vjust=1) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
print(weather_plot)
subset <- subset(weather_merged, weather_merged$march15==1)
subset <- subset(weather_merged, weather_merged$march15==1)
weather_merged %>% group_by(march15)
table(weather_merged$march15)
weather_merged <- weather_merged %>%
mutate(
march15 = case_when(
date >  20200315 ~ 1,
date <= 20200315 ~ 0,
)
)
table(weather_merged$march15)
# Graph of social distancing by income
weather_plot <- ggplot(weather_merged, aes(x=TAVG, y=distancing, color=march15)) +
geom_point(alpha=0.01) +
geom_smooth(method=lm) +
theme_test() +
theme(legend.title = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("Temperature") +
ylab("Change in Average Movement") +
labs(size = "County\nPopulation") +
scale_size(range = c(1,10), labels = comma_format(), breaks = c(10000,100000,1000000,10000000)) +
# scale_x_continuous(labels = dollar_format(prefix="$")) +
scale_y_continuous(labels = percent_format(accuracy=1), limits = c(-1,0.5)) +
# annotate("text", x=47500, y=-0.1, label="More distancing", fontface=2, size=3, hjust=0, vjust=0) +
# annotate("text", x=47500, y=0.1, label="Less distancing", fontface=2, size=3, hjust=0, vjust=1) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
print(weather_plot)
# Graph of social distancing by income
weather_plot <- ggplot(weather_merged, aes(x=TAVG, y=distancing, color=march15, group=march15)) +
geom_point(alpha=0.01) +
geom_smooth(method=lm) +
theme_test() +
theme(legend.title = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("Temperature") +
ylab("Change in Average Movement") +
labs(size = "County\nPopulation") +
scale_size(range = c(1,10), labels = comma_format(), breaks = c(10000,100000,1000000,10000000)) +
# scale_x_continuous(labels = dollar_format(prefix="$")) +
scale_y_continuous(labels = percent_format(accuracy=1), limits = c(-1,0.5)) +
# annotate("text", x=47500, y=-0.1, label="More distancing", fontface=2, size=3, hjust=0, vjust=0) +
# annotate("text", x=47500, y=0.1, label="Less distancing", fontface=2, size=3, hjust=0, vjust=1) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
print(weather_plot)
# Regression for distancing average
reg1 <- glm(distancing ~ state_name + state_county + weather + perc_male + elder + perc_black + perc_Hisp + perc_collg + income + perc_rtail + perc_trspt + perc_hlthc + perc_forgn + perc_rural + perc_unins, weather_merged, family = "gaussian")
# Regression summary
summary(reg1)
# Regression for distancing average
reg1 <- glm(distancing ~ state_name + state_county + TAVG + perc_male + elder + perc_black + perc_Hisp + perc_collg + income + perc_rtail + perc_trspt + perc_hlthc + perc_forgn + perc_rural + perc_unins, weather_merged, family = "gaussian")
# Regression summary
summary(reg1)
# Regression for distancing average
reg1 <- glm(distancing ~ TAVG + perc_male + elder + perc_black + perc_Hisp + perc_collg + income + perc_rtail + perc_trspt + perc_hlthc + perc_forgn + perc_rural + perc_unins + state_name + state_county, weather_merged, family = "gaussian")
# Regression summary
summary(reg1)
# Regression for distancing average
reg1 <- glm(distancing ~ TAVG + perc_male + elder + perc_black + perc_Hisp + perc_collg + income + perc_rtail + perc_trspt + perc_hlthc + perc_forgn + perc_rural + perc_unins + state_county, weather_merged, family = "gaussian")
# Regression for distancing average
reg1 <- glm(distancing ~ TAVG + perc_male + elder + perc_black + perc_Hisp + perc_collg + income + perc_rtail + perc_trspt + perc_hlthc + perc_forgn + perc_rural + perc_unins + state_name, weather_merged, family = "gaussian")
# Regression summary
summary(reg1)
# Regression for distancing average
reg2 <- glm(distancing ~ TAVG + state_name, weather_merged, family = "gaussian")
# Regression summary
summary(reg2)
# Regression for distancing average
reg2 <- glm(distancing ~ TAVG, weather_merged, family = "gaussian")
# Regression summary
summary(reg2)
# Regression summary
summary(reg1); lm.beta(reg1)
# Graph of social distancing by income
weather_plot <- ggplot(weather_merged, aes(x=TAVG, y=distancing, color=state_name, group=state_name)) +
geom_point(alpha=0.01) +
geom_smooth(method=lm) +
theme_test() +
theme(legend.title = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("Temperature") +
ylab("Change in Average Movement") +
labs(size = "County\nPopulation") +
scale_size(range = c(1,10), labels = comma_format(), breaks = c(10000,100000,1000000,10000000)) +
# scale_x_continuous(labels = dollar_format(prefix="$")) +
scale_y_continuous(labels = percent_format(accuracy=1), limits = c(-1,0.5)) +
# annotate("text", x=47500, y=-0.1, label="More distancing", fontface=2, size=3, hjust=0, vjust=0) +
# annotate("text", x=47500, y=0.1, label="Less distancing", fontface=2, size=3, hjust=0, vjust=1) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
print(weather_plot)
# Regression for distancing average
reg1 <- glm(distancing ~ TAVG + perc_male + elder + perc_black + perc_Hisp + perc_collg + income + perc_rtail + perc_trspt + perc_hlthc + perc_forgn + perc_rural + perc_unins + state_name + date, weather_merged, family = "gaussian")
# Regression summary
summary(reg1)
# Graph of social distancing by income
weather_plot <- ggplot(weather_merged, aes(x=TAVG, y=distancing, color=date, group=date)) +
geom_point(alpha=0.01) +
geom_smooth(method=lm) +
theme_test() +
theme(legend.title = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("Temperature") +
ylab("Change in Average Movement") +
labs(size = "County\nPopulation") +
scale_size(range = c(1,10), labels = comma_format(), breaks = c(10000,100000,1000000,10000000)) +
# scale_x_continuous(labels = dollar_format(prefix="$")) +
scale_y_continuous(labels = percent_format(accuracy=1), limits = c(-1,0.5)) +
# annotate("text", x=47500, y=-0.1, label="More distancing", fontface=2, size=3, hjust=0, vjust=0) +
# annotate("text", x=47500, y=0.1, label="Less distancing", fontface=2, size=3, hjust=0, vjust=1) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
print(weather_plot)
lm.beta(reg1)
# Read dataset into R
politics <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/countypres_2000-2016.csv")
# https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/VOQCHQ
# Calculate vote percentages
politics$percent <- politics$candidatevotes/politics$totalvotes
# Select necessary columns
politics <- politics %>% select(year, state, county, FIPS, party, percent)
# Restructure dataset to wide
politics <- politics %>%
pivot_wider(names_from = c(party, year), values_from = c(percent))
# Merge
merged <- merged %>% full_join(politics, by = c("GEO_ID" = "FIPS"))
county <- merged
# Create state,county variable
county$county_name2 <- sub(" County", "", county$county_name)
county$county_name2 <- tolower(county$county_name2)
county$state_name2  <- tolower(county$state_name)
county$state_county <- paste(county$state_name2, county$county_name2, sep=",")
# Reformat from wide to long
county2 <- gather(data=county, date, distancing, "2020-02-24":"2020-04-21", factor_key=TRUE)
county2$date <- gsub("-", "", county2$date)
# Treat all dates as integers
county2$date <- as.numeric(county2$date)
weather$date <- as.numeric(weather$date)
# Merge datasets by "state,county"
weather_merged <- county2 %>% full_join(weather)
# weather_merged <- weather_merged %>%
#   filter_at(vars(c("TAVG")), all_vars(!is.na(.)))
# Complete cases for temperature
weather_merged <- weather_merged %>%
filter_at(vars(c("distancing", "TAVG")), all_vars(!is.na(.)))
table(weather_merged$republican_2016)
describe(weather_merged$republican_2016)
# Write dataset
write.csv(weather_merged, "Weather merged dataset.csv")
names(weather_merged)
