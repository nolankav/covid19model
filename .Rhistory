state_fips %in% c(2)              ~ as.Date("2020-03-29"),
state_fips %in% c(20,51)          ~ as.Date("2020-03-30"),
state_fips %in% c(24,37)          ~ as.Date("2020-03-31"),
state_fips %in% c(4, 11,32,47)    ~ as.Date("2020-04-01"),
state_fips %in% c(23,42,48)       ~ as.Date("2020-04-02"),
state_fips %in% c(12,13)          ~ as.Date("2020-04-03"),
state_fips %in% c(28)             ~ as.Date("2020-04-04"),
state_fips %in% c(1)              ~ as.Date("2020-04-05"),
state_fips %in% c(29)             ~ as.Date("2020-04-06"),
state_fips %in% c(45)             ~ as.Date("2020-04-08"),
TRUE ~ as.Date("2020-12-31"),
)
)
# Calculate days of lock-down
# Note: Need to offset by 1 to count day-of
merged <- merged %>%
mutate(
days_locked = case_when(
(as.Date("2020-03-28") - merged$state_lock + 1) <  0 ~ 0,
(as.Date("2020-03-28") - merged$state_lock + 1) > 10 ~ 10,
TRUE ~ as.numeric(as.Date("2020-03-28") - merged$state_lock + 1),
)
)
# Complete cases for regression variables
merged <- merged %>%
filter_at(vars(c("dist_av2", "income", "perc_rural")), all_vars(!is.na(.)))
# Export merged dataset
write.csv(merged, "Merged dataset.csv")
##############################################################################
# Social distancing by income
##############################################################################
# Pearson correlation
cor.test(merged$income, merged$dist_av2)
# Count n-value for graph
sum(table(merged$income, merged$dist_av2))
# Graph of social distancing by income
income_plot <- ggplot(merged, aes(x=income, y=dist_av2)) +
geom_point(alpha=0.1, aes(size=population)) +
geom_smooth(method=lm) +
theme_test() +
theme(legend.title = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("County Per Capita Income") +
ylab("Change in Average Movement") +
labs(size = "County\nPopulation") +
scale_size(range = c(1,10), labels = comma_format(), breaks = c(10000,100000,1000000,10000000)) +
scale_x_continuous(labels = dollar_format(prefix="$")) +
scale_y_continuous(labels = percent_format(accuracy=1), limits = c(-1,0.5)) +
annotate("text", x=47500, y=-0.1, label="More distancing", fontface=2, size=3, hjust=0, vjust=0) +
annotate("text", x=47500, y=0.1, label="Less distancing", fontface=2, size=3, hjust=0, vjust=1) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
# Print figure
ggsave(plot=income_plot, file="Distancing by income.png", width=5, height=3.5, units='in', dpi=600)
##############################################################################
# Social distancing over time
##############################################################################
# Median for study period
median(merged$dist_av2)
# Capture distances for March onward
daily_dist <- merged[grepl("GEO_ID|2020-", names(merged))]
daily_dist <- daily_dist[-grep("2020-02", names(daily_dist))]
# Melt dataframe for graphing
melted <- gather(daily_dist, variable, value, 2:ncol(daily_dist))
# Treat variables as dates
melted$variable <- as.Date(melted$variable)
# Graph daily averages
time_plot <- ggplot(data=melted, aes(x=variable, y=value, group=GEO_ID)) +
geom_rect(aes(xmin=(MAX_DATE-9), xmax=MAX_DATE,
ymin=-Inf, ymax=Inf), fill='gray90') +
geom_line(alpha=0.008) +
theme_test() +
theme(legend.position = "none",
legend.title = element_blank(),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.text.x  = element_text(angle = 0),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("Date") +
ylab("Change in Average Movement") +
scale_x_date(labels = date_format("%m/%d"), breaks = seq(as.Date("2020-03-01"), MAX_DATE, by="week")) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
coord_cartesian(ylim = c(-1, 0.5)) +
geom_vline(xintercept=as.Date('2020-03-13'), linetype="solid", color="black", size=0.5) +
annotate("text", x=as.Date('2020-03-14'), y=0.3, label="National\nemergency\ndeclared", fontface=2, size=3, hjust=0, vjust=0.5) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
# Print figure
ggsave(plot=time_plot, file="Distancing over time.png", width=8, height=3.5, units='in', dpi=600)
##############################################################################
# Social distancing regression
##############################################################################
# Regression dataset
merged_reg <- merged
# Properly scale variables
merged_reg$dist_av2_sc <- merged_reg$dist_av2*100
# IQRs for primary predictors
IQR(merged$income)
# Scale predictors by IQR
scale <- c("perc_male", "elder", "perc_black", "perc_Hisp", "perc_collg", "income", "perc_rtail", "perc_trspt", "perc_hlthc", "perc_rural", "perc_forgn", "perc_unins", "days_locked")
merged_reg <- merged_reg %>% mutate_at(scale, ~((.x-median(.x))/IQR(.x)))
# Regression for distancing average
reg1 <- glm(dist_av2_sc ~ state_name + perc_male + elder + perc_black + perc_Hisp + perc_collg + income + perc_rtail + perc_trspt + perc_hlthc + perc_forgn + perc_rural + perc_unins, merged_reg, family = "gaussian")
# Regression summary
summary(reg1); lm.beta(reg1)
# Multicollinearity
vif(reg1)
# Number of cases
length(resid(reg1))
# Extract betas and standard errors
model <- NULL
model <- as.data.frame(cbind(coef(summary(reg1))[,1],
coef(summary(reg1))[,2],
coef(summary(reg1))[,4],
lm.beta(reg1)$standardized.coefficients))
colnames(model) <- c("beta", "errors", "pval", "stdb")
# Calculate confidence intervals
model$lowerOR <- model$beta - 1.96*model$errors
model$upperOR <- model$beta + 1.96*model$errors
# Clean up model for export
model <- model[-grep("Intercept", rownames(model)),]
model <- model[-grep("state_name", rownames(model)),]
# Capture names of rows
model$names <- rownames(model)
# Keep relevant columns
model <- model %>% select(names, beta, lowerOR, upperOR, pval)
# Reorder variables
order <- c("perc_male", "perc_black", "perc_Hisp", "elder", "perc_forgn", "perc_collg", "income", "perc_unins", "perc_rtail", "perc_trspt", "perc_hlthc", "perc_rural")
model <- model %>% slice(match(order, names))
# Rename variables
model$names <- sub("perc_male",  "Percentage male", model$names)
model$names <- sub("perc_black", "Percentage Black", model$names)
model$names <- sub("perc_Hisp",  "Percentage Hispanic", model$names)
model$names <- sub("elder",      "Percentage 65 years or older", model$names)
model$names <- sub("perc_forgn", "Percentage foreign-born", model$names)
model$names <- sub("perc_collg", "Percentage with college degree", model$names)
model$names <- sub("income",     "Per capita income", model$names)
model$names <- sub("perc_unins", "Percentage without health insurance", model$names)
model$names <- sub("perc_rtail", "Employment in retail", model$names)
model$names <- sub("perc_trspt", "Employment in transportation", model$names)
model$names <- sub("perc_hlthc", "Employment in health, education, or social services", model$names)
model$names <- sub("perc_rural", "Percentage rural", model$names)
# Label for directionality
model <- model %>%
mutate(
effect = case_when(
pval > 0.05 ~ "<div class=\"unclear\">Unclear</div>",
beta > 0    ~ "<div class=\"less\">Less</div>",
beta < 0    ~ "<div class=\"more\">More</div>",
)
)
# Round to second decimal place
model$beta    <- format(round(model$beta,    digits=2), nsmall=2)
model$lowerOR <- format(round(model$lowerOR, digits=2), nsmall=2)
model$upperOR <- format(round(model$upperOR, digits=2), nsmall=2)
model$pval    <- format(round(model$pval,    digits=3), nsmall=3)
# Replace small pval
model <- model %>%
mutate(
pval = case_when(
pval == "0.000" ~ "<0.001",
TRUE ~ pval,
)
)
# Change hyphens to en dashes
model$beta    <- sub("-", "–", model$beta)
model$lowerOR <- sub("-", "–", model$lowerOR)
model$upperOR <- sub("-", "–", model$upperOR)
# Rename columns
colnames(model) <- c("County-Level Characteristic", "Coefficient", "Lower 95%", "Upper 95%", "P Value", "Effect on Dist.")
# Export model to CSV
write.csv(model, "Regression model.csv")
##############################################################################
# Print composite figure
##############################################################################
# Compile figures into object
composite <- plot_grid(time_plot, income_plot, ncol = 2, rel_widths = c(3.75, 5))
# Print figure
ggsave(plot=composite, file="Composite figure.pdf", width=8.75, height=3.5, units='in', dpi=600)
# County determinants of engagement in social distancing for COVID-19
# N.M. Kavanagh, R.R. Goel, A.S. Venkataramani
# April 10, 2020
# Please direct questions about this script file to nolan.kavanagh@pennmedicine.upenn.edu.
library(foreign)     # Import dataset
library(ggplot2)     # Graphing tools
library(psych)       # Analysis tools
library(car)         # Analysis tools
library(dplyr)       # Analysis tools
library(tidyr)       # Analysis tools
library(forcats)     # Reverse factors
library(stringr)     # Data editing
library(lm.beta)     # Standardized regressions
library(survey)      # Survey regression
library(gtools)      # Analysis tools
library(scales)      # Graphing tools
library(cowplot)     # Graphing tools
library(readstata13) # Import dataset
##############################################################################
# Data preparation
##############################################################################
# Set working directory (for exporting figures)
setwd("/Users/nolankavanagh/Documents/Github/covid19model")
##############################################################################
# Social distancing dataset
##############################################################################
# Read dataset into R
social <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/sds-v3-full-county.csv")
# Select necessary columns
social <- social %>% select(date, state_fips, state_name, county_fips, county_name, daily_distance_diff, daily_visitation_diff)
# Restructure dataset to wide
social <- social %>%
pivot_wider(names_from = c(date), values_from = c(daily_distance_diff, daily_visitation_diff))
# Alphabetize columns
social <- social[,order(colnames(social))]
# Subset dataset to distances
social <- social[grepl("county|state|daily_distance", names(social))]
# Rename distance columns
names(social) = sub("daily_distance_diff_", "", names(social))
# Identify latest date
MAX_DATE <- as.Date(names(social[grepl("2020-", names(social))])
[ncol(social[grepl("2020-", names(social))])])
##############################################################################
# Census/ACS datasets
##############################################################################
# Source: American Community Survey, 5-year averages 2014-2018
# County size, percent male, age distribution, percent Black, percent Hispanic
census_demogr <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/ACSDP5Y2018.DP05_data_with_overlays_2020-03-27T211621.csv")
census_demogr <- census_demogr %>% select(GEO_ID, NAME, DP05_0001E, DP05_0002PE, DP05_0065PE, DP05_0071PE, DP05_0005PE, DP05_0006PE, DP05_0007PE, DP05_0008PE, DP05_0009PE, DP05_0010PE, DP05_0011PE, DP05_0012PE, DP05_0013PE, DP05_0014PE, DP05_0015PE, DP05_0016PE, DP05_0017PE)
# Percent with college degree (age 25+), percent foreign-born
census_demog2 <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/ACSDP5Y2018.DP02_data_with_overlays_2020-04-08T113651.csv")
census_demog2 <- census_demog2 %>% select(GEO_ID, NAME, DP02_0067PE, DP02_0092PE)
# Income per capita
census_income <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/ACSST5Y2018.S1902_data_with_overlays_2020-03-27T201025.csv")
census_income <- census_income %>% select(GEO_ID, NAME, S1902_C03_019E)
# Percent in specific industries
census_sector <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/ACSDP5Y2018.DP03_data_with_overlays_2020-03-29T185057.csv")
census_sector <- census_sector %>% select(GEO_ID, NAME, DP03_0037PE, DP03_0038PE, DP03_0042PE)
# Percent uninsured
census_uninsu <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/ACSST5Y2018.S2701_data_with_overlays_2020-04-08T232745.csv")
census_uninsu <- census_uninsu %>% select(GEO_ID, NAME, S2701_C05_001E)
# Percent of population in rural area
census_rural <- read.csv("/Users/nolankavanagh/Dropbox/COVID projects/Datasets/DECENNIALSF12010.H2_data_with_overlays_2020-03-28T144434.csv")
census_rural <- census_rural %>% select(GEO_ID, NAME, H002001, H002005)
# Re-specify FIPS for renamed counties
census_rural <- census_rural %>%
mutate(
GEO_ID = case_when(
GEO_ID == "0500000US46113" ~ "0500000US46102", # Ogala Lakota, South Dakota
GEO_ID == "0500000US02270" ~ "0500000US02158", # Kusilvak Census Area, Alaska
TRUE ~ as.character(GEO_ID),
)
)
# Merge Census datasets
census <- census_demogr %>% full_join(census_demog2)
census <- census        %>% full_join(census_income)
census <- census        %>% full_join(census_sector)
census <- census        %>% full_join(census_uninsu)
census <- census        %>% full_join(census_rural, by = c("GEO_ID"))
# Rename column names
census <- census %>%
rename(population = DP05_0001E,
perc_male  = DP05_0002PE,
perc_5_und = DP05_0005PE,
perc_5_9   = DP05_0006PE,
perc_10_14 = DP05_0007PE,
perc_15_19 = DP05_0008PE,
perc_20_24 = DP05_0009PE,
perc_25_34 = DP05_0010PE,
perc_35_44 = DP05_0011PE,
perc_45_54 = DP05_0012PE,
perc_55_59 = DP05_0013PE,
perc_60_64 = DP05_0014PE,
perc_65_74 = DP05_0015PE,
perc_75_84 = DP05_0016PE,
perc_85_up = DP05_0017PE,
perc_black = DP05_0065PE,
perc_Hisp  = DP05_0071PE,
income     = S1902_C03_019E,
perc_rtail = DP03_0037PE,
perc_trspt = DP03_0038PE,
perc_hlthc = DP03_0042PE,
perc_collg = DP02_0067PE,
num_rural  = H002005,
num_2010   = H002001,
perc_forgn = DP02_0092PE,
perc_unins = S2701_C05_001E,
)
# Remove extraneous row
census <- census[-grep("id", census$GEO_ID),]
# Reformat FIPS codes
census$GEO_ID <- as.numeric(str_remove(census$GEO_ID, "0500000US"))
# Treat variables as numeric
convert <- c("population", "perc_male", "perc_5_und", "perc_5_9", "perc_10_14", "perc_15_19", "perc_20_24", "perc_25_34", "perc_35_44", "perc_45_54", "perc_55_59", "perc_60_64", "perc_65_74", "perc_75_84", "perc_85_up", "perc_black", "perc_Hisp", "income", "perc_rtail", "perc_trspt", "perc_hlthc", "perc_collg", "num_rural", "num_2010", "perc_forgn", "perc_unins")
census <- census %>% mutate_at(convert, ~as.numeric(as.character(.x)))
# Restructure age brackets
census$young  = census$perc_5_und + census$perc_5_9 + census$perc_10_14 + census$perc_15_19 + census$perc_20_24
census$middle = census$perc_25_34 + census$perc_35_44 + census$perc_45_54 + census$perc_55_59 + census$perc_60_64
census$elder  = census$perc_65_74 + census$perc_75_84 + census$perc_85_up
# Calculate percentage rural population in 2020
census$perc_rural = census$num_rural/census$num_2010*100
##############################################################################
# Merge datasets
##############################################################################
# Merge datasets
merged <- census %>% full_join(social, by = c("GEO_ID" = "county_fips"))
# Determine indexes of last day/ten days prior
START_INDEX <- grep(MAX_DATE-9, colnames(merged))
END_INDEX   <- grep(MAX_DATE,   colnames(merged))
# Print date range
print(MAX_DATE); print(MAX_DATE-9)
# Calculate social distancing for last ten days
merged$dist_av2 <- rowMeans(merged[,START_INDEX:END_INDEX], na.rm=T)
# Assign shelter-in-place orders
merged <- merged %>%
mutate(
state_lock = case_when(
state_fips %in% c(72)             ~ as.Date("2020-03-16"),
state_fips %in% c(6)              ~ as.Date("2020-03-19"),
state_fips %in% c(17,34)          ~ as.Date("2020-03-22"),
state_fips %in% c(36,41,53)       ~ as.Date("2020-03-23"),
state_fips %in% c(9, 10,22,25,26,35,39) ~ as.Date("2020-03-24"),
state_fips %in% c(15,16,18,54,55) ~ as.Date("2020-03-25"),
state_fips %in% c(8, 50)          ~ as.Date("2020-03-26"),
state_fips %in% c(21)             ~ as.Date("2020-03-27"),
state_fips %in% c(27,30,33,44,56) ~ as.Date("2020-03-28"),
state_fips %in% c(2)              ~ as.Date("2020-03-29"),
state_fips %in% c(20,51)          ~ as.Date("2020-03-30"),
state_fips %in% c(24,37)          ~ as.Date("2020-03-31"),
state_fips %in% c(4, 11,32,47)    ~ as.Date("2020-04-01"),
state_fips %in% c(23,42,48)       ~ as.Date("2020-04-02"),
state_fips %in% c(12,13)          ~ as.Date("2020-04-03"),
state_fips %in% c(28)             ~ as.Date("2020-04-04"),
state_fips %in% c(1)              ~ as.Date("2020-04-05"),
state_fips %in% c(29)             ~ as.Date("2020-04-06"),
state_fips %in% c(45)             ~ as.Date("2020-04-08"),
TRUE ~ as.Date("2020-12-31"),
)
)
# Calculate days of lock-down
# Note: Need to offset by 1 to count day-of
merged <- merged %>%
mutate(
days_locked = case_when(
(as.Date("2020-03-28") - merged$state_lock + 1) <  0 ~ 0,
(as.Date("2020-03-28") - merged$state_lock + 1) > 10 ~ 10,
TRUE ~ as.numeric(as.Date("2020-03-28") - merged$state_lock + 1),
)
)
# Complete cases for regression variables
merged <- merged %>%
filter_at(vars(c("dist_av2", "income", "perc_rural")), all_vars(!is.na(.)))
# Export merged dataset
write.csv(merged, "Merged dataset.csv")
##############################################################################
# Social distancing by income
##############################################################################
# Pearson correlation
cor.test(merged$income, merged$dist_av2)
# Count n-value for graph
sum(table(merged$income, merged$dist_av2))
# Graph of social distancing by income
income_plot <- ggplot(merged, aes(x=income, y=dist_av2)) +
geom_point(alpha=0.1, aes(size=population)) +
geom_smooth(method=lm) +
theme_test() +
theme(legend.title = element_text(face="bold"),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("County Per Capita Income") +
ylab("Change in Average Movement") +
labs(size = "County\nPopulation") +
scale_size(range = c(1,10), labels = comma_format(), breaks = c(10000,100000,1000000,10000000)) +
scale_x_continuous(labels = dollar_format(prefix="$")) +
scale_y_continuous(labels = percent_format(accuracy=1), limits = c(-1,0.5)) +
annotate("text", x=47500, y=-0.1, label="More distancing", fontface=2, size=3, hjust=0, vjust=0) +
annotate("text", x=47500, y=0.1, label="Less distancing", fontface=2, size=3, hjust=0, vjust=1) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
# Print figure
ggsave(plot=income_plot, file="Distancing by income.png", width=5, height=3.5, units='in', dpi=600)
##############################################################################
# Social distancing over time
##############################################################################
# Median for study period
median(merged$dist_av2)
# Capture distances for March onward
daily_dist <- merged[grepl("GEO_ID|2020-", names(merged))]
daily_dist <- daily_dist[-grep("2020-02", names(daily_dist))]
# Melt dataframe for graphing
melted <- gather(daily_dist, variable, value, 2:ncol(daily_dist))
# Treat variables as dates
melted$variable <- as.Date(melted$variable)
# Graph daily averages
time_plot <- ggplot(data=melted, aes(x=variable, y=value, group=GEO_ID)) +
geom_rect(aes(xmin=(MAX_DATE-9), xmax=MAX_DATE,
ymin=-Inf, ymax=Inf), fill='gray90') +
geom_line(alpha=0.008) +
theme_test() +
theme(legend.position = "none",
legend.title = element_blank(),
axis.title.x = element_text(face="bold"),
axis.title.y = element_text(face="bold"),
axis.text.x  = element_text(angle = 0),
strip.text.x = element_text(face="bold"),
panel.grid.major.x = element_line(color="gray", size=0.25),
panel.grid.major.y = element_line(color="gray", size=0.25)) +
xlab("Date") +
ylab("Change in Average Movement") +
scale_x_date(labels = date_format("%m/%d"), breaks = seq(as.Date("2020-03-01"), MAX_DATE, by="week")) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
coord_cartesian(ylim = c(-1, 0.5)) +
geom_vline(xintercept=as.Date('2020-03-13'), linetype="solid", color="black", size=0.5) +
annotate("text", x=as.Date('2020-03-14'), y=0.3, label="National\nemergency\ndeclared", fontface=2, size=3, hjust=0, vjust=0.5) +
geom_hline(yintercept=0, linetype="dashed", color="red", size=0.5)
# Print figure
ggsave(plot=time_plot, file="Distancing over time.png", width=8, height=3.5, units='in', dpi=600)
##############################################################################
# Social distancing regression
##############################################################################
# Regression dataset
merged_reg <- merged
# Properly scale variables
merged_reg$dist_av2_sc <- merged_reg$dist_av2*100
# IQRs for primary predictors
IQR(merged$income)
# Scale predictors by IQR
scale <- c("perc_male", "elder", "perc_black", "perc_Hisp", "perc_collg", "income", "perc_rtail", "perc_trspt", "perc_hlthc", "perc_rural", "perc_forgn", "perc_unins", "days_locked")
merged_reg <- merged_reg %>% mutate_at(scale, ~((.x-median(.x))/IQR(.x)))
# Regression for distancing average
reg1 <- glm(dist_av2_sc ~ state_name + perc_male + elder + perc_black + perc_Hisp + perc_collg + income + perc_rtail + perc_trspt + perc_hlthc + perc_forgn + perc_rural + perc_unins, merged_reg, family = "gaussian")
# Regression summary
summary(reg1); lm.beta(reg1)
# Multicollinearity
vif(reg1)
# Number of cases
length(resid(reg1))
# Extract betas and standard errors
model <- NULL
model <- as.data.frame(cbind(coef(summary(reg1))[,1],
coef(summary(reg1))[,2],
coef(summary(reg1))[,4],
lm.beta(reg1)$standardized.coefficients))
colnames(model) <- c("beta", "errors", "pval", "stdb")
# Calculate confidence intervals
model$lowerOR <- model$beta - 1.96*model$errors
model$upperOR <- model$beta + 1.96*model$errors
# Clean up model for export
model <- model[-grep("Intercept", rownames(model)),]
model <- model[-grep("state_name", rownames(model)),]
# Capture names of rows
model$names <- rownames(model)
# Keep relevant columns
model <- model %>% select(names, beta, lowerOR, upperOR, pval)
# Reorder variables
order <- c("perc_male", "perc_black", "perc_Hisp", "elder", "perc_forgn", "perc_collg", "income", "perc_unins", "perc_rtail", "perc_trspt", "perc_hlthc", "perc_rural")
model <- model %>% slice(match(order, names))
# Rename variables
model$names <- sub("perc_male",  "Percentage male", model$names)
model$names <- sub("perc_black", "Percentage Black", model$names)
model$names <- sub("perc_Hisp",  "Percentage Hispanic", model$names)
model$names <- sub("elder",      "Percentage 65 years or older", model$names)
model$names <- sub("perc_forgn", "Percentage foreign-born", model$names)
model$names <- sub("perc_collg", "Percentage with college degree", model$names)
model$names <- sub("income",     "Per capita income", model$names)
model$names <- sub("perc_unins", "Percentage without health insurance", model$names)
model$names <- sub("perc_rtail", "Employment in retail", model$names)
model$names <- sub("perc_trspt", "Employment in transportation", model$names)
model$names <- sub("perc_hlthc", "Employment in health, education, or social services", model$names)
model$names <- sub("perc_rural", "Percentage rural", model$names)
# Label for directionality
model <- model %>%
mutate(
effect = case_when(
pval > 0.05 ~ "<div class=\"unclear\">Unclear</div>",
beta > 0    ~ "<div class=\"less\">Less</div>",
beta < 0    ~ "<div class=\"more\">More</div>",
)
)
# Round to second decimal place
model$beta    <- format(round(model$beta,    digits=2), nsmall=2)
model$lowerOR <- format(round(model$lowerOR, digits=2), nsmall=2)
model$upperOR <- format(round(model$upperOR, digits=2), nsmall=2)
model$pval    <- format(round(model$pval,    digits=3), nsmall=3)
# Replace small pval
model <- model %>%
mutate(
pval = case_when(
pval == "0.000" ~ "<0.001",
TRUE ~ pval,
)
)
# Change hyphens to en dashes
model$beta    <- sub("-", "–", model$beta)
model$lowerOR <- sub("-", "–", model$lowerOR)
model$upperOR <- sub("-", "–", model$upperOR)
# Rename columns
colnames(model) <- c("County-Level Characteristic", "Coefficient", "Lower 95%", "Upper 95%", "P Value", "Effect on Dist.")
# Export model to CSV
write.csv(model, "Regression model.csv")
##############################################################################
# Print composite figure
##############################################################################
# Compile figures into object
composite <- plot_grid(time_plot, income_plot, ncol = 2, rel_widths = c(3.75, 5))
# Print figure
ggsave(plot=composite, file="Composite figure.pdf", width=8.75, height=3.5, units='in', dpi=600)
